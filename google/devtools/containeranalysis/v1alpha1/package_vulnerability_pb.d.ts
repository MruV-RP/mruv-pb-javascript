// package: google.devtools.containeranalysis.v1alpha1
// file: google/devtools/containeranalysis/v1alpha1/package_vulnerability.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../../../../google/api/annotations_pb";

export class VulnerabilityType extends jspb.Message {
  getCvssScore(): number;
  setCvssScore(value: number): void;

  getSeverity(): VulnerabilityType.SeverityMap[keyof VulnerabilityType.SeverityMap];
  setSeverity(value: VulnerabilityType.SeverityMap[keyof VulnerabilityType.SeverityMap]): void;

  clearDetailsList(): void;
  getDetailsList(): Array<VulnerabilityType.Detail>;
  setDetailsList(value: Array<VulnerabilityType.Detail>): void;
  addDetails(value?: VulnerabilityType.Detail, index?: number): VulnerabilityType.Detail;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VulnerabilityType.AsObject;
  static toObject(includeInstance: boolean, msg: VulnerabilityType): VulnerabilityType.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: VulnerabilityType, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VulnerabilityType;
  static deserializeBinaryFromReader(message: VulnerabilityType, reader: jspb.BinaryReader): VulnerabilityType;
}

export namespace VulnerabilityType {
  export type AsObject = {
    cvssScore: number,
    severity: VulnerabilityType.SeverityMap[keyof VulnerabilityType.SeverityMap],
    detailsList: Array<VulnerabilityType.Detail.AsObject>,
  }

  export class Version extends jspb.Message {
    getEpoch(): number;
    setEpoch(value: number): void;

    getName(): string;
    setName(value: string): void;

    getRevision(): string;
    setRevision(value: string): void;

    getKind(): VulnerabilityType.Version.VersionKindMap[keyof VulnerabilityType.Version.VersionKindMap];
    setKind(value: VulnerabilityType.Version.VersionKindMap[keyof VulnerabilityType.Version.VersionKindMap]): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Version.AsObject;
    static toObject(includeInstance: boolean, msg: Version): Version.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Version, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Version;
    static deserializeBinaryFromReader(message: Version, reader: jspb.BinaryReader): Version;
  }

  export namespace Version {
    export type AsObject = {
      epoch: number,
      name: string,
      revision: string,
      kind: VulnerabilityType.Version.VersionKindMap[keyof VulnerabilityType.Version.VersionKindMap],
    }

    export interface VersionKindMap {
      NORMAL: 0;
      MINIMUM: 1;
      MAXIMUM: 2;
    }

    export const VersionKind: VersionKindMap;
  }

  export class Detail extends jspb.Message {
    getCpeUri(): string;
    setCpeUri(value: string): void;

    getPackage(): string;
    setPackage(value: string): void;

    hasMinAffectedVersion(): boolean;
    clearMinAffectedVersion(): void;
    getMinAffectedVersion(): VulnerabilityType.Version | undefined;
    setMinAffectedVersion(value?: VulnerabilityType.Version): void;

    hasMaxAffectedVersion(): boolean;
    clearMaxAffectedVersion(): void;
    getMaxAffectedVersion(): VulnerabilityType.Version | undefined;
    setMaxAffectedVersion(value?: VulnerabilityType.Version): void;

    getSeverityName(): string;
    setSeverityName(value: string): void;

    getDescription(): string;
    setDescription(value: string): void;

    hasFixedLocation(): boolean;
    clearFixedLocation(): void;
    getFixedLocation(): VulnerabilityType.VulnerabilityLocation | undefined;
    setFixedLocation(value?: VulnerabilityType.VulnerabilityLocation): void;

    getPackageType(): string;
    setPackageType(value: string): void;

    getIsObsolete(): boolean;
    setIsObsolete(value: boolean): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Detail.AsObject;
    static toObject(includeInstance: boolean, msg: Detail): Detail.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Detail, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Detail;
    static deserializeBinaryFromReader(message: Detail, reader: jspb.BinaryReader): Detail;
  }

  export namespace Detail {
    export type AsObject = {
      cpeUri: string,
      pb_package: string,
      minAffectedVersion?: VulnerabilityType.Version.AsObject,
      maxAffectedVersion?: VulnerabilityType.Version.AsObject,
      severityName: string,
      description: string,
      fixedLocation?: VulnerabilityType.VulnerabilityLocation.AsObject,
      packageType: string,
      isObsolete: boolean,
    }
  }

  export class VulnerabilityDetails extends jspb.Message {
    getType(): string;
    setType(value: string): void;

    getSeverity(): VulnerabilityType.SeverityMap[keyof VulnerabilityType.SeverityMap];
    setSeverity(value: VulnerabilityType.SeverityMap[keyof VulnerabilityType.SeverityMap]): void;

    getCvssScore(): number;
    setCvssScore(value: number): void;

    clearPackageIssueList(): void;
    getPackageIssueList(): Array<VulnerabilityType.PackageIssue>;
    setPackageIssueList(value: Array<VulnerabilityType.PackageIssue>): void;
    addPackageIssue(value?: VulnerabilityType.PackageIssue, index?: number): VulnerabilityType.PackageIssue;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VulnerabilityDetails.AsObject;
    static toObject(includeInstance: boolean, msg: VulnerabilityDetails): VulnerabilityDetails.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: VulnerabilityDetails, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VulnerabilityDetails;
    static deserializeBinaryFromReader(message: VulnerabilityDetails, reader: jspb.BinaryReader): VulnerabilityDetails;
  }

  export namespace VulnerabilityDetails {
    export type AsObject = {
      type: string,
      severity: VulnerabilityType.SeverityMap[keyof VulnerabilityType.SeverityMap],
      cvssScore: number,
      packageIssueList: Array<VulnerabilityType.PackageIssue.AsObject>,
    }
  }

  export class PackageIssue extends jspb.Message {
    hasAffectedLocation(): boolean;
    clearAffectedLocation(): void;
    getAffectedLocation(): VulnerabilityType.VulnerabilityLocation | undefined;
    setAffectedLocation(value?: VulnerabilityType.VulnerabilityLocation): void;

    hasFixedLocation(): boolean;
    clearFixedLocation(): void;
    getFixedLocation(): VulnerabilityType.VulnerabilityLocation | undefined;
    setFixedLocation(value?: VulnerabilityType.VulnerabilityLocation): void;

    getSeverityName(): string;
    setSeverityName(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): PackageIssue.AsObject;
    static toObject(includeInstance: boolean, msg: PackageIssue): PackageIssue.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: PackageIssue, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): PackageIssue;
    static deserializeBinaryFromReader(message: PackageIssue, reader: jspb.BinaryReader): PackageIssue;
  }

  export namespace PackageIssue {
    export type AsObject = {
      affectedLocation?: VulnerabilityType.VulnerabilityLocation.AsObject,
      fixedLocation?: VulnerabilityType.VulnerabilityLocation.AsObject,
      severityName: string,
    }
  }

  export class VulnerabilityLocation extends jspb.Message {
    getCpeUri(): string;
    setCpeUri(value: string): void;

    getPackage(): string;
    setPackage(value: string): void;

    hasVersion(): boolean;
    clearVersion(): void;
    getVersion(): VulnerabilityType.Version | undefined;
    setVersion(value?: VulnerabilityType.Version): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VulnerabilityLocation.AsObject;
    static toObject(includeInstance: boolean, msg: VulnerabilityLocation): VulnerabilityLocation.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: VulnerabilityLocation, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VulnerabilityLocation;
    static deserializeBinaryFromReader(message: VulnerabilityLocation, reader: jspb.BinaryReader): VulnerabilityLocation;
  }

  export namespace VulnerabilityLocation {
    export type AsObject = {
      cpeUri: string,
      pb_package: string,
      version?: VulnerabilityType.Version.AsObject,
    }
  }

  export interface SeverityMap {
    SEVERITY_UNSPECIFIED: 0;
    MINIMAL: 1;
    LOW: 2;
    MEDIUM: 3;
    HIGH: 4;
    CRITICAL: 5;
  }

  export const Severity: SeverityMap;
}

