/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mruv.Container', null, global);
goog.exportSymbol('proto.mruv.Item', null, global);
goog.exportSymbol('proto.mruv.ItemType', null, global);
goog.exportSymbol('proto.mruv.ItemTypeConstraint', null, global);
goog.exportSymbol('proto.mruv.NumberLimit', null, global);
goog.exportSymbol('proto.mruv.Position', null, global);
goog.exportSymbol('proto.mruv.SizeLimit', null, global);
goog.exportSymbol('proto.mruv.VolumeLimit', null, global);
goog.exportSymbol('proto.mruv.WeightLimit', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ItemType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.ItemType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ItemType.displayName = 'proto.mruv.ItemType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.Item.displayName = 'proto.mruv.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.Container = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mruv.Container.repeatedFields_, null);
};
goog.inherits(proto.mruv.Container, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.Container.displayName = 'proto.mruv.Container';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.SizeLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.SizeLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.SizeLimit.displayName = 'proto.mruv.SizeLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.VolumeLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.VolumeLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.VolumeLimit.displayName = 'proto.mruv.VolumeLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.WeightLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.WeightLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.WeightLimit.displayName = 'proto.mruv.WeightLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.NumberLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.NumberLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.NumberLimit.displayName = 'proto.mruv.NumberLimit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.ItemTypeConstraint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mruv.ItemTypeConstraint.repeatedFields_, null);
};
goog.inherits(proto.mruv.ItemTypeConstraint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.ItemTypeConstraint.displayName = 'proto.mruv.ItemTypeConstraint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mruv.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mruv.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mruv.Position.displayName = 'proto.mruv.Position';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ItemType.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ItemType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ItemType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseWeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    baseVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    stacks: jspb.Message.getFieldWithDefault(msg, 6, 0),
    iconUri: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ItemType}
 */
proto.mruv.ItemType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ItemType;
  return proto.mruv.ItemType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ItemType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ItemType}
 */
proto.mruv.ItemType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBaseWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBaseVolume(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStacks(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIconUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ItemType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ItemType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ItemType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseWeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBaseVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getStacks();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIconUri();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.mruv.ItemType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.mruv.ItemType.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.mruv.ItemType.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mruv.ItemType.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 base_weight = 4;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getBaseWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setBaseWeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double base_volume = 5;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getBaseVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setBaseVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 stacks = 6;
 * @return {number}
 */
proto.mruv.ItemType.prototype.getStacks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.mruv.ItemType.prototype.setStacks = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string icon_uri = 7;
 * @return {string}
 */
proto.mruv.ItemType.prototype.getIconUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.mruv.ItemType.prototype.setIconUri = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    itemType: (f = msg.getItemType()) && proto.mruv.ItemType.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.Item}
 */
proto.mruv.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.Item;
  return proto.mruv.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.Item}
 */
proto.mruv.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.mruv.ItemType;
      reader.readMessage(value,proto.mruv.ItemType.deserializeBinaryFromReader);
      msg.setItemType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getItemType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mruv.ItemType.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.mruv.Item.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.Item.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ItemType item_type = 2;
 * @return {?proto.mruv.ItemType}
 */
proto.mruv.Item.prototype.getItemType = function() {
  return /** @type{?proto.mruv.ItemType} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemType, 2));
};


/** @param {?proto.mruv.ItemType|undefined} value */
proto.mruv.Item.prototype.setItemType = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Item.prototype.clearItemType = function() {
  this.setItemType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Item.prototype.hasItemType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.mruv.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mruv.Item.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 weight = 4;
 * @return {number}
 */
proto.mruv.Item.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.mruv.Item.prototype.setWeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double volume = 5;
 * @return {number}
 */
proto.mruv.Item.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mruv.Item.prototype.setVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mruv.Container.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.Container.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.Container.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.Container} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Container.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    containerItem: (f = msg.getContainerItem()) && proto.mruv.Item.toObject(includeInstance, f),
    sizeLimit: (f = msg.getSizeLimit()) && proto.mruv.SizeLimit.toObject(includeInstance, f),
    volumeLimit: (f = msg.getVolumeLimit()) && proto.mruv.VolumeLimit.toObject(includeInstance, f),
    weightLimit: (f = msg.getWeightLimit()) && proto.mruv.WeightLimit.toObject(includeInstance, f),
    numberLimit: (f = msg.getNumberLimit()) && proto.mruv.NumberLimit.toObject(includeInstance, f),
    itemTypeValidation: (f = msg.getItemTypeValidation()) && proto.mruv.ItemTypeConstraint.toObject(includeInstance, f),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.mruv.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.Container}
 */
proto.mruv.Container.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.Container;
  return proto.mruv.Container.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.Container} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.Container}
 */
proto.mruv.Container.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.mruv.Item;
      reader.readMessage(value,proto.mruv.Item.deserializeBinaryFromReader);
      msg.setContainerItem(value);
      break;
    case 3:
      var value = new proto.mruv.SizeLimit;
      reader.readMessage(value,proto.mruv.SizeLimit.deserializeBinaryFromReader);
      msg.setSizeLimit(value);
      break;
    case 4:
      var value = new proto.mruv.VolumeLimit;
      reader.readMessage(value,proto.mruv.VolumeLimit.deserializeBinaryFromReader);
      msg.setVolumeLimit(value);
      break;
    case 5:
      var value = new proto.mruv.WeightLimit;
      reader.readMessage(value,proto.mruv.WeightLimit.deserializeBinaryFromReader);
      msg.setWeightLimit(value);
      break;
    case 6:
      var value = new proto.mruv.NumberLimit;
      reader.readMessage(value,proto.mruv.NumberLimit.deserializeBinaryFromReader);
      msg.setNumberLimit(value);
      break;
    case 7:
      var value = new proto.mruv.ItemTypeConstraint;
      reader.readMessage(value,proto.mruv.ItemTypeConstraint.deserializeBinaryFromReader);
      msg.setItemTypeValidation(value);
      break;
    case 8:
      var value = new proto.mruv.Item;
      reader.readMessage(value,proto.mruv.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.Container.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.Container.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.Container} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Container.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getContainerItem();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mruv.Item.serializeBinaryToWriter
    );
  }
  f = message.getSizeLimit();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mruv.SizeLimit.serializeBinaryToWriter
    );
  }
  f = message.getVolumeLimit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.mruv.VolumeLimit.serializeBinaryToWriter
    );
  }
  f = message.getWeightLimit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mruv.WeightLimit.serializeBinaryToWriter
    );
  }
  f = message.getNumberLimit();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.mruv.NumberLimit.serializeBinaryToWriter
    );
  }
  f = message.getItemTypeValidation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.mruv.ItemTypeConstraint.serializeBinaryToWriter
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.mruv.Item.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.mruv.Container.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.Container.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Item container_item = 2;
 * @return {?proto.mruv.Item}
 */
proto.mruv.Container.prototype.getContainerItem = function() {
  return /** @type{?proto.mruv.Item} */ (
    jspb.Message.getWrapperField(this, proto.mruv.Item, 2));
};


/** @param {?proto.mruv.Item|undefined} value */
proto.mruv.Container.prototype.setContainerItem = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearContainerItem = function() {
  this.setContainerItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasContainerItem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SizeLimit size_limit = 3;
 * @return {?proto.mruv.SizeLimit}
 */
proto.mruv.Container.prototype.getSizeLimit = function() {
  return /** @type{?proto.mruv.SizeLimit} */ (
    jspb.Message.getWrapperField(this, proto.mruv.SizeLimit, 3));
};


/** @param {?proto.mruv.SizeLimit|undefined} value */
proto.mruv.Container.prototype.setSizeLimit = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearSizeLimit = function() {
  this.setSizeLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasSizeLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VolumeLimit volume_limit = 4;
 * @return {?proto.mruv.VolumeLimit}
 */
proto.mruv.Container.prototype.getVolumeLimit = function() {
  return /** @type{?proto.mruv.VolumeLimit} */ (
    jspb.Message.getWrapperField(this, proto.mruv.VolumeLimit, 4));
};


/** @param {?proto.mruv.VolumeLimit|undefined} value */
proto.mruv.Container.prototype.setVolumeLimit = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearVolumeLimit = function() {
  this.setVolumeLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasVolumeLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WeightLimit weight_limit = 5;
 * @return {?proto.mruv.WeightLimit}
 */
proto.mruv.Container.prototype.getWeightLimit = function() {
  return /** @type{?proto.mruv.WeightLimit} */ (
    jspb.Message.getWrapperField(this, proto.mruv.WeightLimit, 5));
};


/** @param {?proto.mruv.WeightLimit|undefined} value */
proto.mruv.Container.prototype.setWeightLimit = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearWeightLimit = function() {
  this.setWeightLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasWeightLimit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NumberLimit number_limit = 6;
 * @return {?proto.mruv.NumberLimit}
 */
proto.mruv.Container.prototype.getNumberLimit = function() {
  return /** @type{?proto.mruv.NumberLimit} */ (
    jspb.Message.getWrapperField(this, proto.mruv.NumberLimit, 6));
};


/** @param {?proto.mruv.NumberLimit|undefined} value */
proto.mruv.Container.prototype.setNumberLimit = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearNumberLimit = function() {
  this.setNumberLimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasNumberLimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ItemTypeConstraint item_type_validation = 7;
 * @return {?proto.mruv.ItemTypeConstraint}
 */
proto.mruv.Container.prototype.getItemTypeValidation = function() {
  return /** @type{?proto.mruv.ItemTypeConstraint} */ (
    jspb.Message.getWrapperField(this, proto.mruv.ItemTypeConstraint, 7));
};


/** @param {?proto.mruv.ItemTypeConstraint|undefined} value */
proto.mruv.Container.prototype.setItemTypeValidation = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mruv.Container.prototype.clearItemTypeValidation = function() {
  this.setItemTypeValidation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mruv.Container.prototype.hasItemTypeValidation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated Item items = 8;
 * @return {!Array<!proto.mruv.Item>}
 */
proto.mruv.Container.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.mruv.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mruv.Item, 8));
};


/** @param {!Array<!proto.mruv.Item>} value */
proto.mruv.Container.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.mruv.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mruv.Item}
 */
proto.mruv.Container.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.mruv.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mruv.Container.prototype.clearItemsList = function() {
  this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.SizeLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.SizeLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.SizeLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.SizeLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    maxY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.SizeLimit}
 */
proto.mruv.SizeLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.SizeLimit;
  return proto.mruv.SizeLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.SizeLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.SizeLimit}
 */
proto.mruv.SizeLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.SizeLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.SizeLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.SizeLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.SizeLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMaxY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double max_x = 1;
 * @return {number}
 */
proto.mruv.SizeLimit.prototype.getMaxX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.mruv.SizeLimit.prototype.setMaxX = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double max_y = 2;
 * @return {number}
 */
proto.mruv.SizeLimit.prototype.getMaxY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mruv.SizeLimit.prototype.setMaxY = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.VolumeLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.VolumeLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.VolumeLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.VolumeLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    currentVolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.VolumeLimit}
 */
proto.mruv.VolumeLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.VolumeLimit;
  return proto.mruv.VolumeLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.VolumeLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.VolumeLimit}
 */
proto.mruv.VolumeLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxVolume(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.VolumeLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.VolumeLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.VolumeLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.VolumeLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCurrentVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double max_volume = 1;
 * @return {number}
 */
proto.mruv.VolumeLimit.prototype.getMaxVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.mruv.VolumeLimit.prototype.setMaxVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double current_volume = 2;
 * @return {number}
 */
proto.mruv.VolumeLimit.prototype.getCurrentVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mruv.VolumeLimit.prototype.setCurrentVolume = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.WeightLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.WeightLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.WeightLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.WeightLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    currentWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.WeightLimit}
 */
proto.mruv.WeightLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.WeightLimit;
  return proto.mruv.WeightLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.WeightLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.WeightLimit}
 */
proto.mruv.WeightLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxWeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.WeightLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.WeightLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.WeightLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.WeightLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getCurrentWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double max_weight = 1;
 * @return {number}
 */
proto.mruv.WeightLimit.prototype.getMaxWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.mruv.WeightLimit.prototype.setMaxWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double current_weight = 2;
 * @return {number}
 */
proto.mruv.WeightLimit.prototype.getCurrentWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mruv.WeightLimit.prototype.setCurrentWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.NumberLimit.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.NumberLimit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.NumberLimit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.NumberLimit.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentNumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.NumberLimit}
 */
proto.mruv.NumberLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.NumberLimit;
  return proto.mruv.NumberLimit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.NumberLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.NumberLimit}
 */
proto.mruv.NumberLimit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.NumberLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.NumberLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.NumberLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.NumberLimit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCurrentNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 max_number = 1;
 * @return {number}
 */
proto.mruv.NumberLimit.prototype.getMaxNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.mruv.NumberLimit.prototype.setMaxNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 current_number = 2;
 * @return {number}
 */
proto.mruv.NumberLimit.prototype.getCurrentNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.mruv.NumberLimit.prototype.setCurrentNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mruv.ItemTypeConstraint.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.ItemTypeConstraint.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.ItemTypeConstraint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.ItemTypeConstraint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemTypeConstraint.toObject = function(includeInstance, msg) {
  var f, obj = {
    validItemTypesList: jspb.Message.toObjectList(msg.getValidItemTypesList(),
    proto.mruv.ItemType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.ItemTypeConstraint}
 */
proto.mruv.ItemTypeConstraint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.ItemTypeConstraint;
  return proto.mruv.ItemTypeConstraint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.ItemTypeConstraint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.ItemTypeConstraint}
 */
proto.mruv.ItemTypeConstraint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mruv.ItemType;
      reader.readMessage(value,proto.mruv.ItemType.deserializeBinaryFromReader);
      msg.addValidItemTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.ItemTypeConstraint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.ItemTypeConstraint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.ItemTypeConstraint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.ItemTypeConstraint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidItemTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mruv.ItemType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ItemType valid_item_types = 1;
 * @return {!Array<!proto.mruv.ItemType>}
 */
proto.mruv.ItemTypeConstraint.prototype.getValidItemTypesList = function() {
  return /** @type{!Array<!proto.mruv.ItemType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mruv.ItemType, 1));
};


/** @param {!Array<!proto.mruv.ItemType>} value */
proto.mruv.ItemTypeConstraint.prototype.setValidItemTypesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mruv.ItemType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mruv.ItemType}
 */
proto.mruv.ItemTypeConstraint.prototype.addValidItemTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mruv.ItemType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mruv.ItemTypeConstraint.prototype.clearValidItemTypesList = function() {
  this.setValidItemTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mruv.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.mruv.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mruv.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    z: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    rx: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    ry: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    rz: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mruv.Position}
 */
proto.mruv.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mruv.Position;
  return proto.mruv.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mruv.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mruv.Position}
 */
proto.mruv.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mruv.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mruv.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mruv.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mruv.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getRx();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getRy();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getRz();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * optional double x = 2;
 * @return {number}
 */
proto.mruv.Position.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.mruv.Position.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double y = 3;
 * @return {number}
 */
proto.mruv.Position.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.mruv.Position.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double z = 4;
 * @return {number}
 */
proto.mruv.Position.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.mruv.Position.prototype.setZ = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double rx = 5;
 * @return {number}
 */
proto.mruv.Position.prototype.getRx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.mruv.Position.prototype.setRx = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double ry = 6;
 * @return {number}
 */
proto.mruv.Position.prototype.getRy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.mruv.Position.prototype.setRy = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double rz = 7;
 * @return {number}
 */
proto.mruv.Position.prototype.getRz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.mruv.Position.prototype.setRz = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


goog.object.extend(exports, proto.mruv);
